@using TodoApp.Application.ViewModels
@using TodoApp.Domain.Enums
@model TasksViewModel

@{
    ViewData["Title"] = "Tasks";

    string GetPriorityBadgeClass(ETaskPriority priority)
    {
        switch (priority)
        {
            case ETaskPriority.Critical:
                return "badge rounded-pill outlined-badge-danger";
            case ETaskPriority.High:
                return "badge rounded-pill outlined-badge-warning";
            case ETaskPriority.Normal:
                return "badge rounded-pill outlined-badge-info";
            case ETaskPriority.Low:
                return "badge rounded-pill outlined-badge-success";
            default:
                return "badge rounded-pill outlined-badge-primary";
        }
    }

    string GetDeadlineDisplayText(DateTime deadline)
    {
        if(DateTime.Now.Date == deadline.Date)
            return deadline.ToString("HH:mm");

        return deadline.ToString("dd/MM/yyyy");
    }

    string GetAlertBorderClass(TodoApp.Domain.Entities.Task task)
    {
        if (!task.IsCompleted && DateTime.Now.Date == task.Deadline.Date)
            return "border border-danger";

        return string.Empty;
    }
}

<div class="container">

    @if (Model.TasksCount > 0)
    {
        <div class="position-relative w-100 h-100">
            <a asp-action="Create" asp-controller="Task">
                <div class="floating-button bg-primary text-white" style="bottom: 70px; right: 40px"><i class="bi bi-plus"></i></div>
            </a>
        </div>

        <div class="row mt-4">
            <div class="col-md-3 mb-md-0 mb-2">
                <div class="card text-white bg-primary">
                    <div class="card-body">
                        <h4 class="card-title text-truncate" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Home"><i class="bi bi-house"></i> Home</h4>
                        <p class="card-text text-end h2">@(Model.HomeCount)/@(Model.TasksCount)</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-md-0 mb-2">
                <div class="card text-white bg-primary">
                    <div class="card-body">
                        <h4 class="card-title text-truncate" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Work"><i class="bi bi-briefcase"></i> Work</h4>
                        <p class="card-text text-end h2">@(Model.WorkCount)/@(Model.TasksCount)</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3 mb-md-0 mb-2">
                <div class="card text-white bg-primary">
                    <div class="card-body">
                        <h4 class="card-title text-truncate" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Personal"><i class="bi bi-person"></i> Personal</h4>
                        <p class="card-text text-end h2">@(Model.PersonalCount)/@(Model.TasksCount)</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-primary">
                    <div class="card-body">
                        <h4 class="card-title text-truncate" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Shopping"><i class="bi bi-cart-plus"></i> Shopping</h4>
                        <p class="card-text text-end h2">@(Model.ShoppingCount)/@(Model.TasksCount)</p>
                    </div>
                </div>
            </div>
        </div>

        <hr class="my-4">

        <div class="row mb-4 justify-content-end">
            <div class="col-12 col-md-3">
                <button class="btn btn-primary w-100" onclick="handleSendEmail()"><i class="bi bi-envelope-at-fill"></i> Send Email</button>
            </div>
        </div>

        <div class="row">
            <div class="col-md-3 mb-2 mb-md-0">
                <!-- Filter section -->
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Filter Tasks</h5>
                        <form id="filterForm">
                            <div class="form-group">
                                <label for="categoryFilter">Category</label>
                                <select class="form-control" id="categoryFilter">
                                    <option>All</option>
                                    @foreach (var category in Enum.GetValues(typeof(TodoApp.Domain.Enums.ETaskCategory)))
                                    {
                                        <option value="@category">@category</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="priorityFilter">Priority</label>
                                <select class="form-control" id="priorityFilter">
                                    <option>All</option>

                                    @foreach (var priority in Enum.GetValues(typeof(TodoApp.Domain.Enums.ETaskPriority)))
                                    {
                                        <option value="@priority">@priority</option>
                                    }
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="completedFilter">Completed</label>
                                <select class="form-control" id="completedFilter">
                                    <option>All</option>
                                    <option value="True">Yes</option>
                                    <option value="False">No</option>
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary mt-2 w-100"><i class="bi bi-search"></i> Search</button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                <div class="row" id="filteredTasks">
                    @foreach (var task in Model.Tasks)
                    {
                        <div class="col-sm-6 col-lg-4 mb-3 task-card" data-category="@task.Category" data-priority="@task.Priority" data-completed="@task.IsCompleted">
                            <div class="card @(GetAlertBorderClass(task))">
                                <div class="card-body">
                                    <h5 class="card-title text-truncate" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@(task.Title)">@task.Title</h5>
                                    <p class="card-text text-truncate">@task.Description</p>

                                    <div class="d-flex align-items-center justify-content-end text-truncate gap-1">
                                        <a asp-controller="Task" asp-action="Details" asp-route-id="@(task.Id)" class="btn btn-secondary" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="See details"><i class="bi bi-info-circle"></i></a>
                                        @if (!task.IsCompleted)
                                        {
                                            <button type="button" onclick="handleMarkTaskAsCompleted(@task.Id)" class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Mark as completed">
                                                <i class="bi bi-check-circle-fill"></i>
                                            </button>
                                        }
                                        <a asp-controller="Task" asp-action="Edit" asp-route-id="@(task.Id)" class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Edit task"><i class="bi bi-pencil"></i></a>

                                        <button type="button" onclick="handleDelete(@task.Id)" class="btn btn-danger" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Delete task">
                                            <i class="bi bi-trash-fill"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-footer text-truncate d-flex align-items-center justify-content-between">
                                    <div>
                                        <span class="@GetPriorityBadgeClass(task.Priority)">@task.Priority</span>
                                        <span class="badge rounded-pill outlined-badge-secondary">@task.Category</span>
                                    </div>
                                    @if (task.IsCompleted)
                                    {
                                        <i class="bi bi-check-circle-fill float-end text-success" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Completed task"></i>
                                    }
                                    else
                                    {
                                        <div>@GetDeadlineDisplayText(task.Deadline)</div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mt-4 w-100 h-100 align-items-center justify-content-center text-center">
            <h5 class="display-3 ">
                There are no Tasks yet :`/
            </h5>
            <p class="fs-5">You can create and manage your Tasks by clicking on this button down here, enjoy it!</p>
            <a class="btn btn-primary btn-lg w-75" asp-action="Create" asp-controller="Task">Create your first task!</a>
        </div>
        <div class="d-flex align-items-center justify-content-center mt-5">
            <img src="~/images/tasksview.svg" alt="Task manager" class="img-fluid" />
        </div>
    }
</div>

@section Scripts {
    <script>

        function handleSendEmail() {
            Swal.fire({
                title: "Submit your email address",
                input: "text",
                inputAttributes: {
                    autocapitalize: "off"
                },
                showCancelButton: true,
                confirmButtonText: "Send",
                confirmButtonColor: "#0d6efd",
                showLoaderOnConfirm: true,
                preConfirm: async (email) => {
                    try {
                        if (!isEmailValid(email))
                            throw new Error("Invalid email!")

                        $.ajax({
                            url: '/Task/SendTasksEmail',
                            method: 'POST',
                            data: {
                                email
                            }

                        })
                    } catch (error) {
                        Swal.showValidationMessage(`Request failed: ${error}`);
                    }
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Email sent!",
                        text: "You will receive in a few moments an Email containing informations about the tasks.",
                        icon: "success"
                    });
                }
            });
        }

        function handleDelete(taskId) {
            Swal.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#0d6efd",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Task/Delete',
                        method: 'POST',
                        data: {
                            id: taskId
                        },
                        success: function () {
                            window.location.reload()
                        }
                    })
                }
            });
        }

        function handleMarkTaskAsCompleted(taskId) {
            Swal.fire({
                title: "Are you sure?",
                text: "This will make task be turned into 'Completed' status.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#0d6efd",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, do it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: '/Task/MarkTaskAsCompleted',
                        method: 'POST',
                        data: {
                            id: taskId
                        },
                        success: function () {
                            window.location.reload()
                        }
                    })
                }
            });
        }

        $(document).ready(function () {
            $('#filterForm').submit(function (e) {
                e.preventDefault();
                var category = $('#categoryFilter').val();
                var priority = $('#priorityFilter').val();
                var completed = $('#completedFilter').val();

                $('.task-card').each(function () {
                    var cardCategory = $(this).data('category');
                    var cardPriority = $(this).data('priority');
                    var cardCompleted = $(this).data('completed');

                    if ((category === '' || category === 'All' || cardCategory === category) &&
                        ((priority === '' || priority === 'All' || cardPriority === priority)) &&
                        ((completed === '' || completed === 'All' || completed === cardCompleted)))
                        $(this).show();
                    else
                        $(this).hide();
                });
            });
        });
    </script>
}
